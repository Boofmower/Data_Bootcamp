\documentclass[11pt]{article}

\input{../LaTeX/preamble.tex}

% document starts here
\begin{document}
\parskip=\bigskipamount
\parindent=0.0in
\thispagestyle{empty}
\input{../LaTeX/header.tex}

\bigskip\bigskip
\centerline{\Large \bf Data Bootcamp:  Class \#1}
\centerline{Revised: \today}


\section{Overview}

\begin{itemize}
\item Objective:  Learn enough about Python to do useful things with data.
\item Target audience:  programming newbies.  Really,
anyone can do with with a little persistence.
\item Trigger warning:  This will take some effort.  Worth it, but not painless.
\item Team:  Dave Backus, Glenn Okun, Sarah Beckett-Hile, and a rotating group of ninjas.

\item Resources:
\begin{itemize}
\item GitHub repository:  \url{https://github.com/DaveBackus/Data_Bootcamp}
\item Bootcamp Group:  \url{https://groups.google.com/forum/#!forum/nyu_data_bootcamp}
\item This document:  \url{https://www.dropbox.com/s/k2g1tdxj100a4sw/mini_class1.pdf?dl=0}
\end{itemize}
\end{itemize}

\section{Today's plan}

\begin{itemize}
\item Python basics.
\item Reading csv and xls files.
\item Projects.
\item Examples.
\end{itemize}

\section{Python basics}

\begin{itemize}
\item Environments:  Python 3.4 in Spyder, editor, IPython console.
\item Reference:
\href{https://docs.python.org/3.4/tutorial/introduction.html}{Python tutorial},
Section 3.
\item Operations.  Examples:  \verb: 2*3, 2 * 3, 2/3, 2^3, 2**3, log(3), etc :
% http://en.wikibooks.org/wiki/LaTeX/Paragraph_Formatting#Verbatim_text

\item Assignments.  Examples:  {\tt x = 2, y = 3.5, z = x/y, etc }
\item Comments and {\tt print}.  \verb: #, """, #%%, print(x), etc. :
\item Strings:  {\tt a = 'some', b = 'thing', c = a+b, d = '11.32', etc.}

\item Two commands,  {\tt len} and {\tt type}:
{\tt len(first), len(x), type(first), type(x)}.

\item Slicing.  Find an element of {\tt a}: {\tt a[1], a[0], a[1:3], a[-1], a[:2], etc.}

\item {\bf Exercise.}  Set {\tt first} equal to your first name, {\tt last} equal to your last name.
\begin{enumerate}[label=(\alph*)]
\item Set {\tt full} equal to your first and last names together with a space between them.
\item Set {\tt lastfirst} equal to your last name, comma, space, first name.
\end{enumerate}

\item Objects and methods:  Most things in Python are {\bf objects}
(for example, {\tt x, z, first}).
{\bf Methods} are ready-to-go things we can do with them.
The available methods depend on the object.
To get a list of available methods for a given object,
type in the IPython console: {\tt object.[tab]}.
When you find a method you're interested in, go to Spyder's Object explorer
and type {\tt object.method} for a description and syntax.
Examples:  \verb:first.find('a'), x.is_integer():.

\item {\bf Exercise.}  Take {\tt lastfirst} and see what methods are available.
\begin{enumerate}[label=(\alph*)]
\item Use {\tt lastfirst.find} to find the location of the comma and
decompose {\tt lastfirst} into {\tt first} and {\tt last}.
\item Find a method that converts {\tt last} to all lower case.
\end{enumerate}

\item Lists: Collections of things, possibly different, defined by square brackets
{\tt []} with commas between items.
Slicing conventions similar to strings.
Examples:  {\tt numbers = [x, y, z], type(numbers),
print(numbers),
strings = [a, b, c, d],
all = numbers + strings, type(all),
print(all),
all[0], all[-1], all[3:], etc.}

\end{itemize}


\section{Inputting data}
\begin{itemize}
\item Packages:  Collections of commands that do more than basic Python.
There are packages that do almost anything, but we'll focus on a couple:
Matplotlib and pandas.  Matplotlib is a graphics package, we'll talk about it
another time.
We touch on pandas --- briefly --- below.

In Python and many other languages, we need to tell Python to load them.
Here are some options for a mythical package {\tt xyz}:
\begin{itemize}
\item {\tt from xyz import *}.
This imports all the commands from the package {\tt xyz}.
You can replace the star
with specific commands and import only them.
A command {\tt foo} is then executed by typing {\tt foo}.
\item {\tt import xyz}.  This imports the whole thing.
A command {\tt foo} is then executed by adding {\tt xyz.}
(note the period) before its name:  {\tt xyz.foo}.
\item {\tt import xyz as x} is the most common syntax.
It allows the shorthand {\tt x.foo}.
We'll do this momentarily with the package {\tt pandas}.
\end{itemize}
For more, see the
\href{https://docs.python.org/3.4/tutorial/modules.html}{Section 6}
of the Python tutorial.
This refers to modules, which could be packages, subsets of packages, or even
code you've written yourself.

\item The pandas package:  pandas = (Python Data Analysis Library).
This is the central package for data work,
it allows you to use Python for data management along similar
lines to the program R.
We'll import it typically with the command {\it import pandas as pd}
and execute commands with syntax of the form {\t pd.command}.

\item Reference:  pandas has the usual high-quality
{documentation}
we expect from Python packages.
Search ``python pandas'' or go to
\url{http://pandas.pydata.org/}.
We'll focus here on the input-output tools:
\url{http://pandas.pydata.org/pandas-docs/stable/io.html}.

\item Reading csv files.  We've found that csv files
are the most useful data format, far better than xls or xlsx.
Its simple structure (entries separated by commas or similar) allows easy and rapid input.

Suppose you have (as we do) a csv file in a parallel directory {\tt Data}.
Then we can read it with the \verb:read_csv: command in pandas:
\begin{verbatim}
import pandas as pd
file = '../Data/test1.csv'
df = pd.read_csv(file)
\end{verbatim}
This reads the file {\tt test1.csv} into {\tt df}.
If you try {\tt type(df)} you'll find that {\tt df} is a DataFrame,
the standard object type in pandas.
Some of the methods you could try:
{\tt df.columns} (the column labels),
{\tt df.index} (the row labels),
{\tt df.head(2)} (the top two rows),
and {\tt df.tail(2)} (the bottom two rows).
There are only three rows in this one, so you could simply
print the whole thing, but with large data sets this is very useful.




Even better, {\tt read\_csv} also reads from url's.
The same file is in our GitHub repository (talk about how to find it,
and the Raw button).
We can read it with
\begin{verbatim}
import pandas as pd     # this is redundant if we've already imported it
url = 'https://raw.githubusercontent.com/DaveBackus/Data_Bootcamp/master/Code/Data/test1.csv'
df = pd.read_csv(url)
\end{verbatim}
Or we could read the World Economic Outlook (WEO) database from the IMF.
This reads in the whole thing:
\begin{verbatim}
url = 'http://www.imf.org/external/pubs/ft/weo/2014/01/weodata/WEOApr2014all.xls'
weo = pd.read_csv(url, sep='\t')    # tab = \t
\end{verbatim}
%{\bf Exercise.}
Try this and list the contents.
What does the file look like?

\item Spreadsheets.  They have a more complex structure and the possibility
of more than one sheet.
Here's an example that reads in the first sheet:
\begin{verbatim}
file = '../Data/test2.xlsx'
xls = pd.read_excel(file)       # default is first sheet
\end{verbatim}
% ***********  ?? more at some point


\item Copying from url.
Here's an example that copies a file from a url:
\begin{verbatim}
import urllib.request           # this is a module from the package urllib
file = 'foo.csv'
url = 'https://raw.githubusercontent.com/DaveBackus/Data_Bootcamp/master/Code/Data/test1.csv'
urllib.request.urlretrieve(url, file)
\end{verbatim}
This way you can copy the file to your own computer and read it in from there.
This does the same thing, courtesy of Sarah:
\begin{verbatim}
f = urllib.request.urlopen(url)
file = 'foo_sbh.csv'
with open(file, 'wb') as local_file:
    local_file.write(f.read())
\end{verbatim}

\item {\bf Exercise.}  Create a spreadsheet and save it as both csv and xlsx.
Write code to read them into Python.


\item Zip files.  The {\tt zipfile} module (part of basic Python)
lets you do whatever you want with zip files.
Some examples:
\begin{verbatim}
import pandas as pd
import urllib
import zipfile
import os

url  = 'http://databank.worldbank.org/data/download/WDI_csv.zip'
file = os.path.basename(url)            # strip out file name
urllib.request.urlretrieve(url, file)   # copy to disk

# see what's there
print(['Is zipfile?', zipfile.is_zipfile(file)])
zf = zipfile.ZipFile(file, 'r')
print('List of zipfile contents (two versions)')
[print(file) for file in zf.namelist()]
zf.printdir()

# extract a component
csv = zf.extract('WDI_Data.csv')        # copy to disk
df1 = pd.read_csv('WDI_Data.csv')       # read
print(df1.columns)                      # check contents

# alternative:  open and read
csv = zf.open('WDI_Data.csv')
df2 = pd.read_csv(csv)
print(df3.columns)
\end{verbatim}
For more, see the section of the Python tutorial that describes the
\href{https://docs.python.org/3.4/library/zipfile.html#module-zipfile}{zipfile module}.

\end{itemize}

\section{Projects}


It's best to have a goal, something you're working toward.
Might be something you can show potential employers to
demonstrate your skill set.


\section{Examples}

These illustrate some of the possibilities of Python
with data that's available free from online sources.
This goes beyond what we've learned so far, but gives you a sense
of what we'll be doing.
Some examples:
\begin{itemize}
\item FRED.  Great online source of macroeconomic data.
\item Fama-French.  Great source of equity returns on portfolios sorted by type and industry.
Used to illustrate boxplots.
\item World Bank.  Country indicators. Used to illustrate bubble plot (scatter plot with third variable
indicated by size of ``bubble'').
\end{itemize}
See the code for details.
We're still working on Yahoo's Options data,
which went from working to not working in the last week.

What examples would you like to see?
Tell us, or post a suggestion on the Group.


\section{Coming attractions}

In the works:
\begin{itemize}
\item Basic programming tools:  control flow, functions.
\item Data:  the pandas package.
\item Graphics:  the Matplotlib package.
\end{itemize}

If there's interest:
\begin{itemize}
\item SQL databases.
\item Scraping data from websites.
\item Interactive web graphics:  Plot.ly and Google charts.
\item Anything else?
\end{itemize}

\section{Before the next class}

\begin{itemize}
\item Play around with Python.
Play around with some of the code snippets you've seen.
Experiment with new methods.
Try to read data you're using for other purposes.
Run programs you find in the documentation.

\item Think about projects.
Skim through our list of projects and data sources, see if anything crosses your mind.
Or ask your employer.  Or anywhere else you find data.

\item Do the assignment below.  Really, give it a try.  Tell us what undergrad major pays the most.
Think about graphics you can use to make the case.
Bounce around ideas for a (small) project of your own.

\item Get help when you need it.
If you get stuck, ask friends for help, or post a question on the Google Group.
Uee StackOverflow rules if possible:  include a self-contained example of your problem, code that others can fix.

\item {\bf Exercise.}
Read the article from the FiveThirtyEight (first link below) about income
by college major of recent graduates.
It takes data from a survey run by the US government (the American Community Survey) and
produces figures summarizing the salaries of students who majored in
various subjects.  They've kindly posted the data online --- also the R
code --- in the second link.

Your mission:

(a) Read the data in the file {\tt recent-grads.csv} in the 538 GitHub
repository (link below).
You should be able to read it into Python straight from the url.
Make sure you use the link from the Raw file.
How many data points do you have?  How many
variables?

(b) Think about graphs you'd like to see, whether in the article or
not.  You could, for example, look through the Matplotlib gallery
(link below) and see if there are any graph types that you think you
could use to present this data effectively.

(d) If you're feeling brave, produce a graph of your own.  We haven't
talked much about graphics yet, so if you get stuck, ask questions or stop.

{\it Links\/} \\
Article:  \url{http://fivethirtyeight.com/features/the-economic-guide-to-picking-a-college-major/} \\
Code and data:
\url{https://github.com/fivethirtyeight/data/tree/master/college-majors} \\
Gallery:  \url{http://matplotlib.org/1.2.1/gallery.html}


\end{itemize}

%\pagebreak
\section*{Python code}

Attached.  Download this pdf file, open in Adobe Acrobat or the equivalent,
and click on the pushpins:
\attachfile{../Code/Python/bootcamp_basics.py}
\attachfile{../Code/Python/bootcamp_examples.py}

\subsection*{Basics}
{\small
\verbatiminput{../Code/Python/bootcamp_basics.py}
}

\subsection*{Examples}

{\small
\verbatiminput{../Code/Python/bootcamp_examples.py}
}

\end{document}
